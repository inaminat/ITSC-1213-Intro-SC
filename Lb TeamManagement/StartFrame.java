/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package lab13inputvalidation;
//import java.awt.Component;
//import java.awt.Container;
import java.awt.Dimension;
//import java.awt.FocusTraversalPolicy;
import java.awt.Toolkit;
import java.util.Arrays;
//import java.util.Vector;
import javax.swing.JOptionPane;
//import sun.security.util.Password;

/**
 *
 * @author MC Lane
 */
public class StartFrame extends javax.swing.JFrame {
    private int formHeight = 400;
    private int formWidth = 480;
    private boolean allInputIsGood = true;
    private InfoModel myModel;

    
    /**
     * Creates new form StartFrame
     */
    public StartFrame(InfoModel model) {
        initComponents();
        myModel = model;
        
       
        
        centerForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtBirthDateMM = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtBirthDateDD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBirthDateYYYY = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtItemCount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtItemCost = new javax.swing.JTextField();
        btnAccept = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        pwdFirst = new javax.swing.JPasswordField();
        pwdSecond = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Username:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Password:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Confirm Password:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Birth Date:");

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        txtBirthDateMM.setToolTipText("Enter 1-31");
        txtBirthDateMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateMMActionPerformed(evt);
            }
        });

        jLabel5.setText("/");

        txtBirthDateDD.setToolTipText("Enter 1-12");
        txtBirthDateDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateDDActionPerformed(evt);
            }
        });

        jLabel6.setText("/");

        txtBirthDateYYYY.setToolTipText("Enter four digits (i.e. 2014)");
        txtBirthDateYYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateYYYYActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Item Count:");

        txtItemCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCountActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Item Cost:");

        txtItemCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemCostActionPerformed(evt);
            }
        });

        btnAccept.setText("Submit");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        btnAccept.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnAcceptKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAcceptKeyPressed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.setFocusable(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemCost, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBirthDateMM, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBirthDateDD, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBirthDateYYYY, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pwdSecond, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                .addComponent(pwdFirst, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addContainerGap(105, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAccept)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pwdFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pwdSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBirthDateMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtBirthDateDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtBirthDateYYYY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtItemCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept)
                    .addComponent(btnExit))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    private void txtItemCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemCostActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void txtBirthDateMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateMMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateMMActionPerformed

    private void txtBirthDateDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateDDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateDDActionPerformed

    private void txtBirthDateYYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateYYYYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateYYYYActionPerformed

    private void txtItemCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemCountActionPerformed

    /**
     * Respond to Accept button click.  Create TotalFrame only if all data fields are valid.
     */
    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        acceptInput();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAcceptKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcceptKeyTyped
    }//GEN-LAST:event_btnAcceptKeyTyped

    private void btnAcceptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcceptKeyPressed
        acceptInput();
    }//GEN-LAST:event_btnAcceptKeyPressed

    /**
     * Validate input data fields
     */
    private boolean validateInput(){
        //these constants could be used for comparisons in your validation edits
        final int MAXMONTH = 12;
        final int MINMONTH = 1;
        final int MINYEAR = 2014;
        final int[] MAXDAY ={31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        final int MIN_PWD_LENGTH = 8;
        
        //trim spaces from front and back of all input fields
        String name = txtUserName.getText().trim();
        char[] password1 = pwdFirst.getPassword();
        char[] password2 = pwdSecond.getPassword();
        String dateMM = txtBirthDateMM.getText().trim();
        String dateDD = txtBirthDateDD.getText().trim();
        String dateYYYY = txtBirthDateYYYY.getText().trim();
        String count = txtItemCount.getText().trim();
        String amount = txtItemCost.getText().trim();
        

        if (name.isEmpty()) {
            displayErrorMessage("Username field is empty. Please correct.");
            return false;
        } 
        
        if (password1.length < 1) {
            displayErrorMessage("Password is not long enough. Must be 8 characters.");
            return false;
        } 
        
        if (password2.length < 1) {
            displayErrorMessage("Password is not long enough. Must be 8 characters.");
            return false;
        } 
        if (dateMM.isEmpty()) {  
            displayErrorMessage("Birth day field is empty. Please correct.");
            return false;
            
        }
        if (dateDD.isEmpty()) {  
            displayErrorMessage("Birth month field is empty. Please correct.");
            return false;
        }  
        if (dateYYYY.isEmpty()) {  
            displayErrorMessage("Birth year field is empty. Please correct.");
            return false;
        }  
        if (count.isEmpty()) {  
            displayErrorMessage("Item count field is empty. Please correct.");
            return false;
        }  
        if (amount.isEmpty()) {  
            displayErrorMessage("Item cost field is empty. Please correct.");
            return false;
        }  

        //------------------------------------------------------------------------------
        //
        // Your additional validation edit code should go here
        //
        //------------------------------------------------------------------------------
       
        
        /*Check if user's name is not contains spase*/
        String newName= new String(); 
        if (name.contains(" ")) {
            newName=name.replaceAll(" ","");
            displayErrorMessage("Space in the name will be delite in the next window");
           } else {
        newName=name;}
        
        
        /* Check if user created correct password     
        *Must only contain letters and numbers
        *Must contain at least one number and at least one Uppercase letter*/
        char ch;
        boolean numberPresent = false;
        boolean upperCasePresent = false;
        boolean lowerCasePresent = false;

        for (int i = 0; i < password1.length; i++) {
            ch = password1[i];
        
            if (Character.isUpperCase(ch)) {
                upperCasePresent = true;
            }
            if (Character.isDigit(ch)) {
                numberPresent = true;
            }
              if( String.valueOf(password1[i]).matches("[^a-zA-Z0-9]") ){
          
            /* A non-alphanumeric character was found, return false */ 
           displayErrorMessage("Password has to be only numbers and letters.");
            return false;
    }
        }
       
        if ( upperCasePresent && numberPresent) {       
        } else {
            displayErrorMessage("Password created not correct.");
            return false;
        }
      
       
         /*Check Password Confirm. Must be exactly the same as Password*/
        boolean same = Arrays.equals(password1, password2);
        if (!same) {
            displayErrorMessage("Passwords don't much ");
            return false;
        }

        
        /*Check the correct input for date of birth*/
           String month = new String();
           String date = new String();
           String year = new String();
           
         /* Check month  */
       try{
         if (Integer.parseInt(dateMM) <= MAXMONTH && Integer.parseInt(dateMM) >= MINMONTH) {
           month = dateMM;            
        }  else {
           displayErrorMessage("Month has to be a number between 1 and 12");
            return false;}     
       }catch (NumberFormatException exception){
            displayErrorMessage("Month has to be a number");
            return false;
       } 
       

        /* Check date  */
       try{ 
        for (int i = 0; i < MAXDAY.length; i++) {
            i=Integer.parseInt(dateMM)-1;          
            if (MAXDAY[i] >= Integer.parseInt(dateDD) && Integer.parseInt(dateDD)!=0 && 
                 Integer.parseInt(dateDD)>=1) {
             date = dateDD;
            } else {
                displayErrorMessage("Date is incorrect");
                return false;
            }
        break;
        }
       }catch (NumberFormatException exception){ 
           displayErrorMessage("Date is not a number. Input correct date");
            return false;}
        
     
       /* Check year  */
       
      try{ 
        if (Integer.parseInt(dateYYYY) <= MINYEAR && Integer.parseInt(dateYYYY) != 0
           && (MINYEAR - Integer.parseInt(dateYYYY)) < 100 && (MINYEAR - Integer.parseInt(dateYYYY)) > 0) {
            year=dateYYYY;
        } else {
            displayErrorMessage("Year is incorrect");
            return false;
        }
      }catch (NumberFormatException exception){ 
           displayErrorMessage("Year is not a number. Input correct year");
            return false;}
        
      
      /* Check "Coun" field. Must be an integer.  Must be 0 or positive.*/
   
         try {
            int d = Integer.parseInt(count);
            if (Integer.parseInt(count) < 0) {
                displayErrorMessage("Count has to be positive number");
                return false;
            }
        } catch (NumberFormatException nfe) {
            displayErrorMessage("Count has to be whole number");
            return false;
        }

      /* Check "Cost" field.  Must be numeric.  Must be a double*/
        try {
            Double.parseDouble(amount);
            if (Double.parseDouble(amount) < 0) {
                displayErrorMessage("Cost has to be a positive number");
                return false;
            }
        } catch (NumberFormatException nfe) {
            displayErrorMessage("Cost has to be a decimal number");
            return false;
        }

        //------------------------------------------------------------------------------
        //the only way to reach this point is for all input to be valid
        //store local variables into class variables that will be accessible when TotalFrame is created
        //then return with allInputIsGood still set true
        

        // once you have all the input validated, put it in the model
        // you might need to adjust some of these after validation 
        
        myModel.setName(newName);
        myModel.setCount(Integer.parseInt(count));
        myModel.setCost(Double.parseDouble(amount));
        myModel.setFinalDate(month + "/" + date + "/" + year);
        return allInputIsGood;
    }
    
    /**
     * Display the error message
     */
    private void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Input Validation Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * respond to ACCEPT button click or ENTER key when Accept button has focus
     */
    private void acceptInput() {
        if(validateInput()){
            // create the second frame, passing it the model, that holds the data
            TotalFrame myTotalFrame = new TotalFrame(myModel);
            myTotalFrame.setTitle("TotalFrame");
            myTotalFrame.setVisible(true);
        }
    }
    
    
    /**
     * Get dimensions of screen and center form
     */
    private void centerForm() {
        Toolkit tKit = Toolkit.getDefaultToolkit();
        Dimension screenSize = tKit.getScreenSize();
        this.setSize(formWidth, formHeight);
        this.setLocation(screenSize.width / 2 - formWidth / 2,
                         screenSize.height / 2 - formHeight / 2);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField pwdFirst;
    private javax.swing.JPasswordField pwdSecond;
    private javax.swing.JTextField txtBirthDateDD;
    private javax.swing.JTextField txtBirthDateMM;
    private javax.swing.JTextField txtBirthDateYYYY;
    private javax.swing.JTextField txtItemCost;
    private javax.swing.JTextField txtItemCount;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables


}
